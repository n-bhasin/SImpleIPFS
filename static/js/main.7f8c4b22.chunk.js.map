{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","ipfs","require","ipfsClient","state","storageValue","buffer","captureFile","event","preventDefault","log","target","files","file","reader","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","onSubmit","a","version","ipfsVersion","hash","add","path","className","this","src","alt","type","onChange","Component"],"mappings":"wPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kIErItBC,G,OADaC,EAAQ,IACdC,CAAW,gCAElBf,E,4MACJgB,MAAQ,CAAEC,aAAc,GAAIC,OAAQ,M,EAEpCC,YAAc,SAACC,GACbA,EAAMC,iBAENV,QAAQW,IAAIF,EAAMG,OAAOC,MAAM,IAC/B,IAAMC,EAAOL,EAAMG,OAAOC,MAAM,GAChCb,QAAQW,IAAIG,GACZ,IAAMC,EAAS,IAAIjC,OAAOkC,WAC1BD,EAAOE,kBAAkBH,GACzBC,EAAOG,UAAY,WACjB,EAAKC,SAAS,CAAEZ,OAAQa,EAAOL,EAAOM,UACtCrB,QAAQW,IAAI,SAAU,EAAKN,MAAME,U,EAIrCe,S,uCAAW,WAAOb,GAAP,+BAAAc,EAAA,6DACTd,EAAMC,iBADG,SAEiBR,EAAKsB,UAFtB,OAEHC,EAFG,OAGTzB,QAAQW,IAAIc,GAEZzB,QAAQW,IAAI,0BACRe,EAAO,GANF,iCAOkBxB,EAAKyB,IAAI,EAAKtB,MAAME,SAPtC,4HAOQc,EAPR,EAQPrB,QAAQW,IAAIU,GACZK,EAAOL,EAAOO,KATP,kTAWT5B,QAAQW,IAAI,cAAee,GAC3B,EAAKP,SAAS,CAAEb,aAAcoB,IAZrB,4E,6GAeT,OACE,yBAAKG,UAAU,mBACb,iDAEA,8DAC6B,KAA5BC,KAAKzB,MAAMC,aACV,oBAEA,yBACEyB,IAAG,+BAA0BD,KAAKzB,MAAMC,cACxC0B,IAAI,cAIR,0BAAMV,SAAUQ,KAAKR,UACnB,2BAAOW,KAAK,OAAOC,SAAUJ,KAAKtB,cAClC,2BAAOyB,KAAK,YAEd,kDAAwBH,KAAKzB,MAAMC,mB,GAlDzB6B,aAwDH9C,Q","file":"static/js/main.7f8c4b22.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient(\"https://ipfs.infura.io:5001\");\n\nclass App extends Component {\n  state = { storageValue: \"\", buffer: null };\n\n  captureFile = (event) => {\n    event.preventDefault();\n\n    console.log(event.target.files[0]);\n    const file = event.target.files[0];\n    console.log(file);\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) });\n      console.log(\"Buffer\", this.state.buffer);\n    };\n  };\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    const ipfsVersion = await ipfs.version();\n    console.log(ipfsVersion);\n\n    console.log(\"Submitting the File...\");\n    var hash = \"\";\n    for await (const result of ipfs.add(this.state.buffer)) {\n      console.log(result);\n      hash = result.path;\n    }\n    console.log(\"IPFS Hash: \", hash);\n    this.setState({ storageValue: hash });\n  };\n  render() {\n    return (\n      <div className=\"Container-fluid\">\n        <nav>IPFS File Upload</nav>\n\n        <p>This Image is stored using IPFS</p>\n        {this.state.storageValue === \"\" ? (\n          \"There is no image\"\n        ) : (\n          <img\n            src={`https://ipfs.io/ipfs/${this.state.storageValue}`}\n            alt=\"No-images\"\n          />\n        )}\n\n        <form onSubmit={this.onSubmit}>\n          <input type=\"file\" onChange={this.captureFile} />\n          <input type=\"submit\" />\n        </form>\n        <p>This is image hash: {this.state.storageValue}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}